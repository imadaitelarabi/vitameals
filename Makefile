# VitaMeals - Main Project Makefile
# Provides commands to manage all project services

.PHONY: help start-all stop-all restart-all status dev-setup cleanup check-tools mobile-only web-only db-only logs logs-follow

# Default target
help:
	@echo "VitaMeals - Main Project Management Commands"
	@echo ""
	@echo "üöÄ Service Management:"
	@echo "  start-all        - Start all project services (Supabase + Mobile + Web)"
	@echo "  stop-all         - Stop all project services"
	@echo "  restart-all      - Restart all project services"
	@echo "  status           - Show status of all services"
	@echo ""
	@echo "üéØ Individual Services:"
	@echo "  mobile-only      - Start mobile app only (Expo)"
	@echo "  web-only         - Start web app only (Next.js)"
	@echo "  db-only          - Start database only (Supabase)"
	@echo ""
	@echo "üõ†Ô∏è  Development Setup:"
	@echo "  dev-setup        - Complete development environment setup"
	@echo "  check-tools      - Verify all required tools are installed"
	@echo ""
	@echo "üßπ Cleanup:"
	@echo "  cleanup          - Stop services and clean up processes"
	@echo ""
	@echo "üìÑ Logs:"
	@echo "  logs             - Show recent logs from all services"
	@echo "  logs-follow      - Follow logs in real-time"
	@echo ""
	@echo "üìä Examples:"
	@echo "  make start-all   # Start database, mobile, and web"
	@echo "  make stop-all    # Stop all services"
	@echo "  make status      # Check what's running"
	@echo ""
	@echo "üí° Individual Service Commands:"
	@echo "  Database: cd supabase && make db-local / make db-local-stop"
	@echo "  Mobile:   cd mobile && npm start"
	@echo "  Web:      cd web && npm run dev"

# Start all project services
start-all:
	@echo "üöÄ Starting VitaMeals Development Environment"
	@echo "============================================"
	@echo ""
	@echo "1Ô∏è‚É£ Checking Docker and Supabase status..."
	@if ! command -v docker >/dev/null 2>&1; then \
		echo "‚ùå Docker not found. Please install Docker first."; \
		exit 1; \
	fi
	@if ! docker info >/dev/null 2>&1; then \
		echo "‚ùå Docker is not running. Please start Docker first."; \
		exit 1; \
	fi
	@echo "‚úÖ Docker is running"
	@echo ""
	@echo "2Ô∏è‚É£ Starting Supabase local instance..."
	@echo "üîç Checking for stopped containers..."
	@STOPPED_CONTAINERS=$$(docker ps -a --filter "name=supabase_" --filter "status=exited" --format "{{.Names}}" | wc -l | tr -d ' '); \
	if [ $$STOPPED_CONTAINERS -gt 0 ]; then \
		echo "‚ö†Ô∏è  Found $$STOPPED_CONTAINERS stopped Supabase containers"; \
		echo "üßπ Cleaning up stopped containers first..."; \
		cd supabase && supabase stop 2>/dev/null || true; \
		echo "üîÑ Restarting with fresh containers..."; \
	fi
	@cd supabase && make db-local
	@echo ""
	@echo "3Ô∏è‚É£ Generating universal types..."
	@cd supabase && make gen-types
	@echo ""
	@echo "4Ô∏è‚É£ Starting Mobile app (Expo)..."
	@echo "üì± Mobile app will be available via Expo Go"
	@echo "üîÑ Starting mobile in background..."
	@cd mobile && npm start > ../mobile.log 2>&1 &
	@echo "‚úÖ Mobile app started in background (logs: mobile.log)"
	@echo ""
	@echo "5Ô∏è‚É£ Starting Web app (Next.js)..."
	@echo "üåê Web app will be available at: http://localhost:3000"
	@echo "üîÑ Starting web in background..."
	@cd web && npm run dev > ../web.log 2>&1 &
	@echo "‚úÖ Web app started in background (logs: web.log)"
	@echo ""
	@echo "üéâ All services are now running!"
	@echo ""
	@echo "üì± Mobile: Expo CLI running (check mobile.log for QR code)"
	@echo "üåê Web: http://localhost:3000"
	@echo "üìä Supabase Studio: http://localhost:54323"
	@echo "üîó Supabase API: http://localhost:54321"
	@echo "üìÑ Universal Types: ./types/database.types.ts"
	@echo ""
	@echo "üìä Use 'make status' to check service status"
	@echo "üõë Use 'make stop-all' to stop all services"

# Stop all project services
stop-all:
	@echo "üõë Stopping VitaMeals Development Environment"
	@echo "============================================"
	@echo ""
	@echo "1Ô∏è‚É£ Stopping Mobile app (Expo)..."
	@-pkill -f "expo.*start" 2>/dev/null || true
	@-pkill -f "@expo/cli.*start" 2>/dev/null || true
	@-pkill -f "expo-cli.*start" 2>/dev/null || true
	@echo "‚úÖ Mobile app stopped"
	@echo ""
	@echo "2Ô∏è‚É£ Stopping Web app (Next.js)..."
	@-pkill -f "next.*dev" 2>/dev/null || true
	@-pkill -f "node.*next" 2>/dev/null || true
	@echo "‚úÖ Web app stopped"
	@echo ""
	@echo "3Ô∏è‚É£ Stopping Supabase local instance..."
	@cd supabase && make db-local-stop || true
	@echo ""
	@echo "4Ô∏è‚É£ Cleaning up any remaining processes..."
	@-pkill -f "node.*expo" 2>/dev/null || true
	@-pkill -f "node.*next" 2>/dev/null || true
	@-pkill -f "metro" 2>/dev/null || true
	@echo "‚úÖ Cleanup completed"
	@echo ""
	@echo "üéâ All services have been stopped!"

# Restart all services
restart-all:
	@echo "üîÑ Restarting VitaMeals Development Environment"
	@echo "=============================================="
	@make stop-all
	@sleep 3
	@make start-all

# Show status of all services
status:
	@echo "üìä VitaMeals Services Status"
	@echo "============================"
	@echo ""
	@echo "üóÑÔ∏è  Database Services (Supabase):"
	@echo "-----------------------------------"
	@if command -v supabase >/dev/null 2>&1; then \
		cd supabase && supabase status 2>/dev/null || echo "‚ùå Supabase not running"; \
	else \
		echo "‚ùå Supabase CLI not found"; \
	fi
	@echo ""
	@echo "üì± Mobile Services (Expo):"
	@echo "--------------------------"
	@if pgrep -f "expo.*start" >/dev/null 2>&1; then \
		echo "‚úÖ Expo development server is running"; \
		echo "üì± Check mobile.log for QR code to scan with Expo Go"; \
	else \
		echo "‚ùå Expo development server is not running"; \
	fi
	@echo ""
	@echo "üåê Web Services (Next.js):"
	@echo "---------------------------"
	@if pgrep -f "next.*dev" >/dev/null 2>&1; then \
		echo "‚úÖ Next.js development server is running"; \
		echo "üåê Web URL: http://localhost:3000"; \
	else \
		echo "‚ùå Next.js development server is not running"; \
	fi
	@echo ""
	@echo "üìÑ Universal Types:"
	@echo "------------------"
	@if [ -f "types/database.types.ts" ]; then \
		echo "‚úÖ Universal types exist at ./types/database.types.ts"; \
		echo "üìÖ Last updated: $$(stat -f "%Sm" types/database.types.ts 2>/dev/null || stat -c "%y" types/database.types.ts 2>/dev/null || echo "unknown")"; \
	else \
		echo "‚ùå Universal types not found - run 'cd supabase && make gen-types'"; \
	fi
	@echo ""
	@echo "üîç Process Details:"
	@echo "------------------"
	@echo "Mobile processes:"
	@pgrep -fl "expo\|metro" 2>/dev/null || echo "  No mobile processes found"
	@echo ""
	@echo "Web processes:"
	@pgrep -fl "next.*dev" 2>/dev/null || echo "  No web processes found"
	@echo ""
	@echo "Supabase processes:"
	@pgrep -fl "supabase\|postgres\|gotrue\|realtime\|storage\|edge-runtime" 2>/dev/null | head -5 || echo "  No Supabase processes found"
	@echo ""
	@echo "üìÅ Log files:"
	@if [ -f "mobile.log" ]; then \
		echo "  üì± Mobile logs: ./mobile.log"; \
	fi
	@if [ -f "web.log" ]; then \
		echo "  üåê Web logs: ./web.log"; \
	fi

# Complete development environment setup
dev-setup:
	@echo "üõ†Ô∏è  VitaMeals Development Setup"
	@echo "==============================="
	@echo ""
	@echo "This will set up your complete development environment."
	@echo "‚ö†Ô∏è  This may take several minutes..."
	@echo ""
	@read -p "Continue? (y/N): " confirm; \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		echo ""; \
		echo "1Ô∏è‚É£ Checking required tools..."; \
		make check-tools; \
		echo ""; \
		echo "2Ô∏è‚É£ Installing mobile dependencies..."; \
		cd mobile && npm install; \
		echo ""; \
		echo "3Ô∏è‚É£ Installing web dependencies..."; \
		cd web && npm install; \
		echo ""; \
		echo "4Ô∏è‚É£ Setting up database environment..."; \
		cd supabase && make dev-setup; \
		echo ""; \
		echo "5Ô∏è‚É£ Starting all services..."; \
		make start-all; \
		echo ""; \
		echo "üéâ Development environment setup complete!"; \
		echo ""; \
		echo "üìù Next steps:"; \
		echo "  üì± Mobile: Scan QR code in mobile.log with Expo Go app"; \
		echo "  üåê Web: Open http://localhost:3000"; \
		echo "  üìä Database: Open http://localhost:54323 for Supabase Studio"; \
		echo "  üìÑ Types: Universal types available at ./types/database.types.ts"; \
		echo ""; \
		echo "üìä Check service status with: make status"; \
		echo "üõë Stop services with: make stop-all"; \
	else \
		echo "‚ùå Setup cancelled"; \
	fi

# Check if all required tools are installed
check-tools:
	@echo "üîç Checking Required Development Tools"
	@echo "====================================="
	@echo ""
	@echo "Core Tools:"
	@if command -v node >/dev/null 2>&1; then \
		echo "‚úÖ Node.js: $$(node --version)"; \
	else \
		echo "‚ùå Node.js not found - Install from https://nodejs.org/"; \
	fi
	@if command -v npm >/dev/null 2>&1; then \
		echo "‚úÖ npm: $$(npm --version)"; \
	else \
		echo "‚ùå npm not found - Usually comes with Node.js"; \
	fi
	@if command -v make >/dev/null 2>&1; then \
		echo "‚úÖ make: $$(make --version | head -1)"; \
	else \
		echo "‚ùå make not found - Install build tools for your OS"; \
	fi
	@echo ""
	@echo "Mobile Development:"
	@if command -v expo >/dev/null 2>&1; then \
		echo "‚úÖ Expo CLI: $$(expo --version)"; \
	else \
		echo "‚ùå Expo CLI not found - Install with: npm install -g @expo/cli"; \
	fi
	@echo ""
	@echo "Database Tools:"
	@if command -v supabase >/dev/null 2>&1; then \
		echo "‚úÖ Supabase CLI: $$(supabase --version)"; \
	else \
		echo "‚ùå Supabase CLI not found - Install with: npm install -g supabase"; \
	fi
	@if command -v docker >/dev/null 2>&1; then \
		echo "‚úÖ Docker: $$(docker --version)"; \
	else \
		echo "‚ùå Docker not found - Required for local Supabase"; \
		echo "   Install from https://docker.com/get-started"; \
	fi
	@echo ""
	@echo "Project Files:"
	@if [ -f "mobile/package.json" ]; then \
		echo "‚úÖ Mobile package.json found"; \
	else \
		echo "‚ùå Mobile package.json not found"; \
	fi
	@if [ -f "web/package.json" ]; then \
		echo "‚úÖ Web package.json found"; \
	else \
		echo "‚ùå Web package.json not found"; \
	fi
	@if [ -f "supabase/config.toml" ]; then \
		echo "‚úÖ Supabase config found"; \
	else \
		echo "‚ùå Supabase config not found"; \
	fi
	@echo ""
	@echo "Dependencies:"
	@if [ -d "mobile/node_modules" ]; then \
		echo "‚úÖ Mobile dependencies installed"; \
	else \
		echo "‚ö†Ô∏è  Mobile dependencies not installed - Run: cd mobile && npm install"; \
	fi
	@if [ -d "web/node_modules" ]; then \
		echo "‚úÖ Web dependencies installed"; \
	else \
		echo "‚ö†Ô∏è  Web dependencies not installed - Run: cd web && npm install"; \
	fi

# Clean up processes and temporary files
cleanup:
	@echo "üßπ Cleaning Up VitaMeals Environment"
	@echo "==================================="
	@echo ""
	@echo "üõë Stopping all services..."
	@make stop-all
	@echo ""
	@echo "üóëÔ∏è  Removing temporary files..."
	@-rm -f mobile.log 2>/dev/null || true
	@-rm -f web.log 2>/dev/null || true
	@-rm -rf mobile/.expo/* 2>/dev/null || true
	@-rm -rf web/.next/cache/* 2>/dev/null || true
	@echo "‚úÖ Temporary files cleaned"
	@echo ""
	@echo "üîç Checking for remaining processes..."
	@REMAINING=$$(pgrep -f "expo\|next.*dev\|supabase\|postgres.*vitameals" 2>/dev/null | wc -l); \
	if [ $$REMAINING -gt 0 ]; then \
		echo "‚ö†Ô∏è  Found $$REMAINING remaining processes"; \
		echo "If needed, manually kill with: pkill -f 'expo\|next\|supabase'"; \
	else \
		echo "‚úÖ No remaining processes found"; \
	fi
	@echo ""
	@echo "üéâ Cleanup completed!"

# Individual service shortcuts
mobile-only:
	@echo "üì± Starting mobile app only..."
	@echo "Expo will start and show QR code for Expo Go app"
	@cd mobile && npm start

web-only:
	@echo "üåê Starting web app only..."
	@echo "Next.js will be available at: http://localhost:3000"
	@cd web && npm run dev

db-only:
	@echo "üóÑÔ∏è  Starting database only..."
	@cd supabase && make db-local

# Show service logs
logs:
	@echo "üìÑ VitaMeals Service Logs"
	@echo "========================"
	@echo ""
	@if [ -f "mobile.log" ]; then \
		echo "üì± Mobile logs (last 15 lines):"; \
		echo "-------------------------------"; \
		tail -15 mobile.log; \
		echo ""; \
	else \
		echo "üì± No mobile logs found (mobile.log)"; \
		echo ""; \
	fi
	@if [ -f "web.log" ]; then \
		echo "üåê Web logs (last 15 lines):"; \
		echo "----------------------------"; \
		tail -15 web.log; \
		echo ""; \
	else \
		echo "üåê No web logs found (web.log)"; \
		echo ""; \
	fi
	@echo "üí° Tips:"
	@echo "  ‚Ä¢ Follow mobile logs: tail -f mobile.log"
	@echo "  ‚Ä¢ Follow web logs: tail -f web.log"
	@echo "  ‚Ä¢ Supabase logs: cd supabase && supabase status"
	@echo "  ‚Ä¢ Follow all logs: make logs-follow"

# Follow logs in real-time
logs-follow:
	@echo "üìÑ Following VitaMeals logs (Ctrl+C to exit)..."
	@echo "==============================================="
	@if [ -f "mobile.log" ] && [ -f "web.log" ]; then \
		echo "Following both mobile and web logs..."; \
		tail -f mobile.log web.log; \
	elif [ -f "mobile.log" ]; then \
		echo "Following mobile logs only..."; \
		tail -f mobile.log; \
	elif [ -f "web.log" ]; then \
		echo "Following web logs only..."; \
		tail -f web.log; \
	else \
		echo "No logs found. Start services first with: make start-all"; \
	fi

# Quick development shortcuts
dev: start-all

# Generate types shortcut
gen-types:
	@echo "üìù Generating universal types..."
	@cd supabase && make gen-types

# Environment status check
env-status:
	@echo "üîç Checking environment configuration..."
	@cd supabase && make env-status